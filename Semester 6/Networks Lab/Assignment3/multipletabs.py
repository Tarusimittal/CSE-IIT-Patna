import socket
import json
import threading
import time
import _thread

#IT will read from the json file that we have created
with open('configuration.json', 'r') as openfile:
    configure = json.load(openfile)


#it keeps a count of simulatenous connections
concurrent_connection = 0

# We define some values as default which
#are taken from our json configuration file
configure_filename = configure["defaultFile"]
max_connections = configure["max_concurrent_thread"]
ip_blocked = configure["blockIp"]

#It handles the requests that are generated by clients
def handle_request(request,ip):
    global concurrent_connection
    headers = request.split('\n')
    filename = headers[0].split()[1]

    #It redirects to the default directory
    if filename == '/':
        filename = configure_filename

    try:
        fin = open(filename[1:])
        content = fin.read()
        fin.close()
        # Generating an OK response for client
        response = 'HTTP/1.0 200 OK\n\n' + content
    except FileNotFoundError:
        #generating a 404 error with a cutomized msg
        response = 'HTTP/1.0 404 NOT FOUND\n\n Sorry!, File Not Found!!'
    # Blocking the response, if ip is blocked
    if ip_blocked.count(ip)>0:
        response = 'HTTP/1.0 404 NOT FOUND\n\n Sorry!, This Ip is blocked!!'

    if concurrent_connection > max_connections:
        response = 'HTTP/1.0 404 NOT FOUND\n\n Sorry!!,Limit exceeded, Cant complete your request  !!'
    return response

#This is teh IP address of the socket
SERVER_HOST = "192.168.1.63"
#This helkps ud to communicate between server and the client
SERVER_PORT = 8088


# Create socket
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server_socket.bind((SERVER_HOST, SERVER_PORT))
server_socket.listen(1)
print(' Listening on port %s ...' % SERVER_PORT)

# Function to handle multiple requests from different clients
def solve(client_connection,client_address):
    global concurrent_connection
    #stores the ip adress oand port number of the client
    ip = client_address[0]
    port = client_address[1]

    #as we have opeoned a new page it increases the connection number by 1
    concurrent_connection += 1
    print("The new connection was made from IP:",client_address)
    while True:
        request = client_connection.recv(1024).decode()
        response = handle_request(request,ip)
        client_connection.sendall(response.encode())
        print("The client has disconnected, Ip:", client_address)
        break
    # Making the thread sleep so that we can see the effect of max allowed users
    time.sleep(10)
    client_connection.close()
    # If connection is closed that it reduces simulatenous users
    concurrent_connection -= 1

while True:
    try:
    	# Wait for client connections
        # it creates a new thread whenever a new client requests a server
    	client_connection, client_address = server_socket.accept()
    	_thread.start_new_thread(solve,(client_connection,client_address,))
    except KeyboardInterrupt as e:
        print("Server is now closed")
        break
    except Exception as e:
        print("Error ",e)
        break

server_socket.close() #we close the socket
