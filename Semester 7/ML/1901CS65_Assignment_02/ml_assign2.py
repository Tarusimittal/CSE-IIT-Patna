# -*- coding: utf-8 -*-
"""ML_assign2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k8IeKl8a73bJ5y0otXk2kUXJ7eG9B0q3

# **DBSCAN**

---
**Importing Libraries**
---
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

#importing Sklearn tools
from sklearn.preprocessing import Normalizer
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
from sklearn.cluster import DBSCAN 

#importing data viz tools
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
sns.set_style('darkgrid')

import warnings
warnings.filterwarnings("ignore")

"""# **Dataset Import And Read**"""

# We are reading the data from the given dataset
blobs = pd.read_csv('/content/cluster_blobs.csv')
moons = pd.read_csv('/content/cluster_moons.csv')
circles = pd.read_csv('/content/cluster_circles.csv')

#Head gives the value of the top elements, by default it gives top 5 values
# But as we have declared the value to be 10
# It gives us top 10 values
blobs.head(10)

"""# **Exploratory Analysis**"""

print(blobs.describe())
print("-------")

# This indicates that there is no null value in any of the parameters
blobs.isnull().sum()

print(circles.describe())
print("-------")
circles.isnull().sum()

print(moons.describe())
print("-------")
moons.isnull().sum()

"""# **Data Cleaning**"""

#For consistency we are using X1 and X2 for moons dataset also.
moons.rename({"X_1": 'X1', 'X_2': 'X2'}, axis = 1, inplace = True)

"""# **Cluster Visualisation**

This gives us the initial cluster visualisation
"""

plt.figure(figsize = (8,4), dpi = 100)
sns.scatterplot(data=blobs,x='X1',y='X2')
plt.show()

plt.figure(figsize = (8,4), dpi = 100)
sns.scatterplot(data=circles,x='X1',y='X2')
plt.show()

plt.figure(figsize = (8,4), dpi = 100)
sns.scatterplot(data=moons,x='X1',y='X2')
plt.show()

"""# **BLOBS**

**Silhouette Score**

The Silhouette Score helps us find out the number of clusters we need to divide our dataset into
"""

silhouettes={}
range_n_clusters = list(range(2,10,1))
for num_clusters in range_n_clusters:
    kmeans = KMeans(n_clusters=num_clusters, max_iter=60)
    kmeans.fit(blobs)
    silhouette_avg = silhouette_score(blobs, kmeans.labels_)
    silhouettes[num_clusters]=silhouette_avg

plt.subplot(1,2,2)
plt.plot(range_n_clusters,np.array(list(silhouettes.values())).astype(float),color='red')
plt.xlabel('No. of clusters')
plt.ylabel('Silhouette score')


print(f'Silhouettes score per cluster: {silhouettes} \n ')

"""**K Means**"""

model = KMeans(n_clusters = 3)
labels = model.fit_predict(blobs)
plt.figure(figsize = (8,4), dpi = 100)
sns.scatterplot(data=blobs,x='X1',y='X2',hue=labels,palette='Set1')
plt.show()

"""**DBSCAN**"""

model = DBSCAN(eps=0.6)
labels = model.fit_predict(blobs)
plt.figure(figsize = (8,4), dpi = 100)
sns.scatterplot(data=blobs,x='X1',y='X2',hue=labels,palette='Set1')
plt.show()

"""# **CIRCLES**

**Silhouette Score**
"""

silhouettes={}
range_n_clusters = list(range(2,10,1))
for num_clusters in range_n_clusters:
    kmeans = KMeans(n_clusters=num_clusters, max_iter=60)
    kmeans.fit(blobs)
    silhouette_avg = silhouette_score(circles, kmeans.labels_)
    silhouettes[num_clusters]=silhouette_avg

plt.subplot(1,2,2)
plt.plot(range_n_clusters,np.array(list(silhouettes.values())).astype(float),color='red')
plt.xlabel('No. of clusters')
plt.ylabel('Silhouette score')


print(f'Silhouettes score per cluster: {silhouettes} \n ')

"""**K Means**"""

model = KMeans(n_clusters = 4)
labels = model.fit_predict(circles)
plt.figure(figsize = (8,4), dpi = 100)
sns.scatterplot(data=circles,x='X1',y='X2',hue=labels,palette='Set1')
plt.show()

"""**DBSCAN**"""

model = DBSCAN(eps=0.15)
labels = model.fit_predict(circles)
plt.figure(figsize = (8,4), dpi = 100)
sns.scatterplot(data=circles,x='X1',y='X2',hue=labels,palette='Set1')
plt.show()

"""# **MOONS**

**Silhouette Score**
"""

silhouettes={}
range_n_clusters = list(range(2,10,1))
for num_clusters in range_n_clusters:
    kmeans = KMeans(n_clusters=num_clusters, max_iter=60)
    kmeans.fit(moons)
    silhouette_avg = silhouette_score(moons, kmeans.labels_)
    silhouettes[num_clusters]=silhouette_avg

plt.subplot(1,2,2)
plt.plot(range_n_clusters,np.array(list(silhouettes.values())).astype(float),color='red')
plt.xlabel('No. of clusters')
plt.ylabel('Silhouette score')


print(f'Silhouettes score per cluster: {silhouettes} \n ')

"""**K Means**"""

model = KMeans(n_clusters = 3)
labels = model.fit_predict(moons)
plt.figure(figsize = (8,4), dpi = 100)
sns.scatterplot(data=moons,x='X1',y='X2',hue=labels,palette='Set1')
plt.show()

"""**DBSCAN**"""

model = DBSCAN(eps=0.15)
labels = model.fit_predict(moons)
plt.figure(figsize = (8,4), dpi = 100)
sns.scatterplot(data=moons,x='X1',y='X2',hue=labels,palette='Set1')
plt.show()